###########################################
##  -----------------------------------
##  ---MUCKY VISION 3 (BASIC ENGINE)---
##  -----------------------------------
##
##  makefile_ConsoleTest_windows_MinGW
##
##  Makefile to build test for Console 
##  class on Windows using MinGW.
##
##  Before running this file, please 
##  read section 4 of README.md in the
##  projects top level directory.
##
##  Copyright (c) Muckytaters 2023
##
##  This program is free software: you can
##  redistribute it and/or modify it under 
##  the terms of the GNU General Public License
##  as published by the Free Software Foundation,
##  either version 3 of the License, or (at your
##  option) any later version.
##
##  This program is distributed in the hope it
##  will be useful, but WITHOUT ANY WARRANTY;
##  without even the implied warranty of MERCHANTABILITY
##  or FITNESS FOR A PARTICULAR PURPOSE. See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU
##  General Public License along with this
##  program. If not, see http://www.gnu.org/license
############################################

#############################################
## DISCLAIMER: Dependencies described herein
## are maintained on a best-effort basis and
## may not be 100% correct. If in doubt, execute
## 'make -f makefile_ConsoleTest_windows_MinGW clean' 
## then 'make -f makefile_ConsoleTest_windows_MinGW'
## to rebuild the entire project
#############################################

#############################################
############# PRELIMINARIES #################
#############################################

#List of all files to be built
BUILDS := build\GameEng.o build\ImageDataASCII.o build\ImageMan.o build\ImageText.o build\Console.o build\ConsoleTest.o 

#CC specifies which compiler we're using
#Note: MinGW (or Windows) seems to automatically
#      convert 'g++' to the correct executable.
#      If this is not recognised, try replacing
#      g++ here with mingw32-g++.exe 
CC := g++

#COMPILER_FLAGS specifies the additional compilation options we're using
# -g debug build
# -std=c++14 Use C++14 (only needed for binary literals, otherwise C++11 is fine)
# -pedantic-errors Use standardized C++ only, don't use any g++ specific extensions
# -mwindows hide terminal window when running on Windows (leave in if you want the terminal)
COMPILER_FLAGS := -g -std=c++14 -pedantic-errors -mwindows

# This must be set to either 'x86_64' or 'i686' (without the enclosing ' marks).
# IMPORTANT: There must no NO TRAILING SPACES, OR ANYTHING ELSE AFTER THIS ENTRY
BUILD_OPTION := i686

$(info BUILD_OPTION set as $(BUILD_OPTION) )

# THESE VARIABLES MUST BE SET BY YOU, REPLACE ??? WITH THE ACTUAL PATH
# IMPORTANT: There must no NO TRAILING SPACES, OR ANYTHING ELSE AFTER THESE ENTRIES
SDL_PATH := ???
MINGW_PATH := ???

ifeq '$(SDL_PATH)' '???'
    $(error SDL_PATH must be set by you! You need to edit makefile_ImageManTest_windows_MinGW )
endif

ifeq '$(MING_PATH)' '???'
    $(error MINGW_PATH must be set by you! You need to edit makefile_ImageManTest_windows_MinGW )
endif

$(info SDL_PATH set as $(SDL_PATH) )
$(info MINGW_PATH set as $(MINGW_PATH) )

#LINKER_FLAGS specifies the libraries we're linking against (i686 version)
#INC specifies include directories (i686 version)
ifeq '$(BUILD_OPTION)' 'i686'
    LINKER_FLAGS := -L$(SDL_PATH)\i686-w64-mingw32\lib -L$(MINGW_PATH)\lib -lmingw32 -lSDL2main -lSDL2
    INC := -I..\include -I$(SDL_PATH)\i686-w64-mingw32\include
else
    ifeq '$(BUILD_OPTION)' 'x86_64'
        LINKER_FLAGS := -L$(SDL_PATH)\x86_64-w64-mingw32\lib -L$(MINGW_PATH)\lib -lmingw32 -lSDL2main -lSDL2    
        INC := -I..\include -I$(SDL_PATH)\x86_64-w64-mingw32\include
    else
        $(error BUILD_OPTION is invalid.)
    endif 
endif
$(info LINKER_FLAGS = $(LINKER_FLAGS) )
$(info INC = $(INC) )

#OUTPUT specifies the name of our exectuable
OUTPUT := ConsoleTest


#############################################
################# EXECUTABLE ################
#############################################

# This comes first so we can use 'make' as well as 'make all'
#This is the target that compiles our executable
all: $(BUILDS)
	$(CC) $(BUILDS) $(COMPILER_FLAGS) $(INC) $(LINKER_FLAGS) -o $(OUTPUT)

# Rules to make dependencies.................

## GameEng ##
build\GameEng.o: ..\src\GameEng.cpp ..\include\GameEng.h ..\include\Defs.h ..\include\KeyEvent.h ..\include\Version.h ..\include\GameEngRenderInfo.h ..\include\GameEngRenderBlock.h 
	$(CC) -c ..\src\GameEng.cpp $(COMPILER_FLAGS) $(INC) $(LINKER_FLAGS) -o build\GameEng.o

## ImageDataASCII ##
build\ImageDataASCII.o: ..\src\ImageDataASCII.cpp ..\include\ImageDataASCII.h  
	$(CC) -c ..\src\ImageDataASCII.cpp $(COMPILER_FLAGS) $(INC) $(LINKER_FLAGS) -o build\ImageDataASCII.o

## ImageMan ##
build\ImageMan.o: ..\src\ImageMan.cpp ..\include\ImageMan.h build\ImageDataASCII.o build\GameEng.o 
	$(CC) -c ..\src\ImageMan.cpp $(COMPILER_FLAGS) $(INC) $(LINKER_FLAGS) -o build\ImageMan.o

## ImageText ##
build\ImageText.o: ..\src\ImageText.cpp ..\include\ImageText.h build\GameEng.o build\ImageMan.o 
	$(CC) -c ..\src\ImageText.cpp $(COMPILER_FLAGS) $(INC) $(LINKER_FLAGS) -o build\ImageText.o

## Console ##
build\Console.o: ..\src\Console.cpp ..\include\Console.h build\GameEng.o build\ImageMan.o build\ImageText.o
	$(CC) -c ..\src\Console.cpp $(COMPILER_FLAGS) $(INC) $(LINKER_FLAGS) -o build\Console.o

## ConsoleTest ##
build\ConsoleTest.o: ConsoleTest.cpp build\Console.o build\GameEng.o build\ImageText.o 
	$(CC) -c ConsoleTest.cpp $(COMPILER_FLAGS) $(INC) $(LINKER_FLAGS) -o build\ConsoleTest.o


#############################################
################### CLEAN ###################
#############################################

.PHONY: clean
clean:
	rm build/*.o
